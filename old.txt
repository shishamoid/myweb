
@Injectable({
  providedIn: 'root'
})
export class WebSocketService {
  private subject: Subject<MessageEvent>;   // -- ① WebSocket接続時に返す Subject

  connect(url: string): Subject<MessageEvent> {   // -- ②  このメソッドを呼び出して Subject を手に入れます
    console.log("this is url")
    console.log(url)

    if (!this.subject) {
      console.log("not this is subject")
      this.subject = this.create(url);
    }
    console.log("pak")
    return this.subject;
  }

  private create(url: string): Subject<MessageEvent> {
    const ws = new WebSocket(url,
    ); // -- ③ WebSocket オブジェクトを生成します
    console.log("created!!")
    console.log(ws.readyState)
    const observable = Observable.create((obs: Observer<MessageEvent>) => { // -- ④ Observable オブジェクトを生成します
      console.log("initialized2")
      ws.onmessage = obs.next.bind(obs);
      ws.onerror = obs.error.bind(obs);
      ws.onclose = obs.complete.bind(obs);

      return ws.close.bind(ws);
    });

    const observer = {    // -- ⑤ Observer オブジェクトを生成します
      next: (data: Object) => {
        console.log("this is a data ")
        console.log(data)
        console.log(ws.readyState)
        console.log(WebSocket.OPEN)
        if (ws.readyState === WebSocket.OPEN) {
          console.log("繋がったから送る")
          console.log(data)
          ws.send(JSON.stringify(data));
        }else{
          console.log("送れなかった")
        }
      },
    };
    console.log("this is url!!")
    console.log(url)
    return Subject.create(observer, observable);    // -- ⑥ Subject を生成してconnect
  }
}


export class ChatMessage {
 username: string;
 text: string;
 systemFlag: boolean;

 constructor(
   username: string,
   text: string,
   systemFlag: boolean
 ) {
   this.username = username;
   this.text = text;
   this.systemFlag = systemFlag;
 }
}

@Injectable({
  providedIn: 'root'
})
export class ChatService {
  private messages: Subject<ChatMessage>;

  private chatUrl(roomnumber: string, username: string): string {
    console.log("this is url!!!")
    console.log(roomnumber,username)
    return `ws://localhost:${roomnumber}`;   // -- ① WebSocket サーバーの接続先です
  }


  constructor(private ws: WebSocketService) {
    console.log("initialized")
  }
  connect(roomnumber: string, name: string): Subject<ChatMessage> { // -- ② チャットの接続。 WebSocketService の connect を呼び出し、 Subject を返します。
    console.log(roomnumber,name)
    console.log("pawapoke")
    console.log(this.ws)
    return this.messages = <Subject<ChatMessage>>this.ws
      .connect(this.chatUrl(roomnumber, name))
      .map((response: MessageEvent): ChatMessage => {
        console.log("繋がった")
        const data = JSON.parse(response.data) as ChatMessage;
        return data;
      });
  }

  send(name: string, message: string): void { // -- ③ メッセージの送信要求をがあったときは、WebSocketService の `next` メソッドを呼んでいるだけです
    console.log("this is send")
    console.log(this.messages)
    console.log("defined")
    this.messages.next(this.createMessage(name, message));
    console.log("sent")
  }

  private createMessage(name: string, message: string): ChatMessage {
    return new ChatMessage(name, message, false);
  }
}
serve(): WebSocketSubject<MessageEvent> {
  console.log("initialized")
  return this.websocket = webSocket({
    url: `ws://localhost:${this.roomnumber}`,
    deserializer: message => {
      console.log("accepted")
      return message;
    }
  });
}
