version: 2.1

orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2

workflows:
  sample:  # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run. 
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows 
    jobs:
      - build

jobs:
  build:  # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.6
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - run:
          name: 環境構築 + テスト
          # This assumes pytest is installed via the install-package step above
          command: |
            echo "環境構築 + テスト"
            eval "$(pyenv init -)"
            eval "$(pyenv virtualenv-init -)"
            pyenv virtualenv 3.6.14 website
            pyenv activate website
            pip install -r requirements.txt
            echo "pyenv finish"
            echo "------------nodejs------------"
            curl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -
            echo "------------npm------------"
            sudo apt install npm
            echo yes | sudo npm install -g @angular/cli
            sudo ng build --prod
            python main.py
      - run:
          name: パッケージ作成
          command: |
            echo "デプロイパッケージ作成"
            pip list
            zappa package -o myweb_handler.zip
      
      - run:
          name: デプロイ
          command: |
            echo "aws認証 + アップロード"
            export aws_access_key_id=$aws_access_key_id
            export aws_secret_access_key=$aws_secret_access_key
            export region=$region
            export output=$output
            aws lambda update-function-code --function-name mywebsite-dev --zip-file fileb://myweb_handler.zip
